import json
import os
from os.path import join


def fix_comma(json_object, output_dir):
    """
    Creates a temporary file to fix missing commas in a JSON object.
    Calls fix_missing_comma() to fix the missing comma.
    """
    output_dir_temp = join(output_dir, 'temp/')
    if not os.path.exists(output_dir_temp):
        os.makedirs(output_dir_temp)
    output_dir_temp_object = join(output_dir_temp, 'json_fix.json')

    with open(output_dir_temp_object, 'w', encoding='utf-8') as f:
        f.write(json_object)

    fixed, fixed_content = fix_missing_comma(output_dir_temp_object)

    return fixed, fixed_content

def fix_missing_comma(json_file: str):
    """Detects and attempts to fix missing commas in a JSON file.
    This function is generated by Gemini 1.5 Pro

    Args:
        json_file: The JSON file.

    Returns:
        A tuple containing:
        - True if a missing comma was detected and fixed, False otherwise.
        - The potentially modified JSON content as a string.
    """

    with open(json_file, 'r', encoding='utf-8') as f:
        content = f.read()

    try:
        json.loads(content) 
        return False, content
    
    except json.JSONDecodeError as e:
        error_msg = str(e)
        if "Expecting ',' delimiter" in error_msg:
            error_pos = int(error_msg.split(" ")[-1].strip("()"))
            last_newline = content[:error_pos].rfind('\n')
            if last_newline != -1 and content[last_newline - 1] != ',':
                error_pos = last_newline

            content = content[:error_pos] + ',' + content[error_pos:]

            try:
                json.loads(content)
                return True, content
            except json.JSONDecodeError as e:
                if "Expecting ',' delimiter" in str(e):
                    with open(json_file, 'w', encoding='utf-8') as f:
                        f.write(content)
                    return fix_missing_comma(json_file)
                return False, content
        else:
            return False, content
